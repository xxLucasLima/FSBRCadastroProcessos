@page "/cadastros"
@page "/"

@using FSBRCadastroProcessos.WebApp.Services
@using MudBlazor

@inject HttpClient Http
@inject ICadastroService CadastroService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<h3>Lista Cadastros</h3>

<div class="form-group mb-4">
    <MudButton @onclick="() => CreateCadastro(new Models.Cadastro(), false)" Color="Color.Primary">Adicione novo Cadastro</MudButton>
</div>

<MudTable Items="Cadastros" Bordered="true" Striped="true" Hover="true" PageSize="10">
    <HeaderContent>
        <MudTh>NPU</MudTh>
        <MudTh>Data de Cadastro</MudTh>
        <MudTh>UF</MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="NPU">@context.NPU</MudTd>
        <MudTd DataLabel="Data de Cadastro">@context.DataCadastro</MudTd>
        <MudTd DataLabel="UF">@context.UF</MudTd>
        <MudTd DataLabel="Ações">
            <MudButton @onclick="(() => ShowEditModal(context, true))" Color="Color.Primary" Size="Size.Small">Detalhes</MudButton>
            <MudButton @onclick="(() => Delete(context.Id))" Color="Color.Error" Size="Size.Small">Deletar</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Models.Cadastro> Cadastros = new List<Models.Cadastro>();

    protected override async Task OnInitializedAsync()
    {
        Cadastros = await CadastroService.GetAll();
    }

    private async Task ShowEditModal(Models.Cadastro cadastro, bool IsEdit)
    {
        var parameters = new DialogParameters { ["Cadastro"] = cadastro, ["isEdit"] = IsEdit };

        DialogOptions options = new DialogOptions { CloseButton = true };

        var dialog = await DialogService.ShowAsync<CadastroDialog>("Edit Cadastro", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadCadastros();
        }
    }

    private async Task CreateCadastro(Models.Cadastro cadastro, bool IsEdit)
    {
        var parameters = new DialogParameters { ["Cadastro"] = cadastro, ["isEdit"] = IsEdit };

        DialogOptions options = new DialogOptions { CloseButton = true };

        var dialog = await DialogService.ShowAsync<CadastroDialog>("Create Cadastro", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadCadastros();
        }
    }

    private async Task Delete(int id)
    {
        await CadastroService.Delete(id);
        await LoadCadastros();
    }

    private async Task LoadCadastros()
    {
        Cadastros = await CadastroService.GetAll();
        StateHasChanged();
    }
}
